<!-- #1 - Make security the default namespace -->
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://www.springframework.org/schema/security
  http://www.springframework.org/schema/security/spring-security-3.1.xsd">
    <!--http://www.springframework.org/schema/security/spring-security-3.2.xsd">-->
  
    <!-- Expression Handler bean definition START -->
    <beans:bean id="webexpressionHandler"                         
                class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>
    <!-- Expression Handler bean definition END -->
       
    <!-- #2 - Make sure we don’t need authorization to get to the login or home page -->
    
    <http pattern="/img/**" security="none"/>
    <http pattern="/css/**" security="none"/>
    <http pattern="/js/**" security="none"/>
    <!--<http pattern="/login" security="none"/>-->
<!--    <http pattern="/contact" security="none"/>-->
    <!--<http pattern="/thankyou" security="none"/>-->
    <!--<http pattern="/sendMessage" security="none"/>-->
    <http pattern="/posts/**" security="none"/>
    <http pattern="/post/**" security="none"/>
    <!--<http pattern="/pages/**" security="none"/>-->
    <http pattern="/comments/**" security="none"/>
    
   <!-- #3 - Authentication/login form and protected endpoint configuration --> 
    <http auto-config="true" use-expressions="true">
        <!-- #3a - Login via html form, use Spring to do the security check --> 
        <!-- #3b - Use the login page at this endpoint --> 
        <!-- #3c - Redirect here if login fails --> 
        <form-login login-processing-url="/j_spring_security_check"
                    login-page="/login"
                    authentication-failure-url="/login?login_error=1"/>
        <!-- #3d - Go back to home page when user logs out -->
        <logout logout-success-url="/home" />
        <!-- #3e - Access to these endpoints require admin role -->
        

        <intercept-url pattern="/" access="permitAll" />
        <intercept-url pattern="/home" access="permitAll" />
        <intercept-url pattern="/login" access="permitAll" />
        <intercept-url pattern="/contact" access="permitAll" />
        <intercept-url pattern="/thankyou" access="permitAll" />
        <intercept-url pattern="/captchaError" access="permitAll" />
        <intercept-url pattern="/sendMessage" access="permitAll" />
        
        <intercept-url pattern="/register" access="permitAll" />
        
        <intercept-url pattern="/admin" access="hasRole('ROLE_ADMIN')" />
        <intercept-url pattern="/admin/" access="hasRole('ROLE_ADMIN')" />
        <intercept-url pattern="/admin/addPost" access="hasRole('ROLE_ADMIN')" />
        <!--<intercept-url pattern="/admin/addPost" access="hasRole('ROLE_SUBADMIN')" />-->
        <intercept-url pattern="/admin/addGuestPost" access="hasRole('ROLE_SUBADMIN')" />
        <intercept-url pattern="/admin/addPage" access="hasRole('ROLE_ADMIN')" />
        <intercept-url pattern="/admin/readMessages" access="hasRole('ROLE_ADMIN')" />
        <intercept-url pattern="/admin/editUsers" access="hasRole('ROLE_ADMIN')" />
        <intercept-url pattern="/admin/guestPosts" access="hasRole('ROLE_ADMIN')" />
        <intercept-url pattern="/pages/editPage/**" access="hasRole('ROLE_ADMIN')" />
        <intercept-url pattern="/comment/**" access="hasRole('ROLE_ADMIN')" />
        <!--<intercept-url pattern="/post" access="ROLE_ADMIN" />-->
        <intercept-url pattern="/admin/editPost/**" access="hasRole('ROLE_ADMIN')" />
        
        <!-- #3f - Access to all other controller endpoints require user role -->
        <!--<intercept-url pattern="/**" access="hasRole('ROLE_USER')" />-->
		
		<intercept-url pattern="/pages/**" access="permitAll" />
    </http>
    <!-- #4 - Authentication Manager config -->
    <authentication-manager>
        <!-- #4a - Authentication Provider - we’re using the JDBC service -->
        <authentication-provider>
            <!-- #4b - Tells Spring Security where to look for user information -->
            <!--       We use the dataSource defined in spring-persistence.xml  --> 
            <!--       and we give Spring Security the query to use to lookup   --> 
            <!--       the user’s credentials (get the password from the users  --> 
            <!--       tables and get the roles from the authorities table)     -->
            <jdbc-user-service id="userService"
                               data-source-ref="dataSource"
                               users-by-username-query=
          "select userName, password, enabled from users where userName=?"
                               authorities-by-username-query=
          "select userName, authority from authorities where userName=?" />
        </authentication-provider>
    </authentication-manager>
</beans:beans>
